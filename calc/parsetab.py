
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARCHITECTURE COLON COMA COMMENT DEFINE END EQUALS ID IN_PORT LKEY LPAREN MOD_NAME NUMBER OUT_PORT PARAMETERS RKEY RPAREN connect edge input node output this widthcreation : define_module set_parameters set_architecture end_moduledefine_module : DEFINE MOD_NAME LKEYend_module : RKEY END MOD_NAMEset_parameters : PARAMETERS COLON input EQUALS NUMBER output EQUALS NUMBER width EQUALS NUMBERset_architecture : ARCHITECTURE COLON arch_expresionsarch_expresions : arch_expresion\n                      | arch_expresions arch_expresion arch_expresion : node_exp\n                      | edge_exp\n                      | connect_expnode_exp : node ID EQUALS MOD_NAME LPAREN NUMBER RPARENedge_exp : edge ID LPAREN NUMBER RPARENconnect_exp : connect LPAREN ID OUT_PORT COMA ID RPARENconnect_exp : connect LPAREN ID COMA ID IN_PORT RPARENconnect_exp : connect LPAREN this IN_PORT COMA ID IN_PORT RPARENconnect_exp : connect LPAREN ID OUT_PORT COMA this OUT_PORT RPAREN'
    
_lr_action_items = {'DEFINE':([0,],[3,]),'$end':([1,11,25,],[0,-1,-3,]),'PARAMETERS':([2,10,],[5,-2,]),'MOD_NAME':([3,15,31,],[6,25,36,]),'ARCHITECTURE':([4,62,],[8,-4,]),'COLON':([5,8,],[9,13,]),'LKEY':([6,],[10,]),'RKEY':([7,16,17,18,19,20,26,43,54,55,57,60,61,],[12,-5,-6,-8,-9,-10,-7,-12,-11,-13,-14,-16,-15,]),'input':([9,],[14,]),'END':([12,],[15,]),'node':([13,16,17,18,19,20,26,43,54,55,57,60,61,],[21,21,-6,-8,-9,-10,-7,-12,-11,-13,-14,-16,-15,]),'edge':([13,16,17,18,19,20,26,43,54,55,57,60,61,],[22,22,-6,-8,-9,-10,-7,-12,-11,-13,-14,-16,-15,]),'connect':([13,16,17,18,19,20,26,43,54,55,57,60,61,],[23,23,-6,-8,-9,-10,-7,-12,-11,-13,-14,-16,-15,]),'EQUALS':([14,27,35,53,],[24,31,41,59,]),'ID':([21,22,29,39,44,46,],[27,28,33,45,49,52,]),'LPAREN':([23,28,36,],[29,32,42,]),'NUMBER':([24,32,41,42,59,],[30,37,47,48,62,]),'this':([29,44,],[34,50,]),'output':([30,],[35,]),'OUT_PORT':([33,50,],[38,56,]),'COMA':([33,38,40,],[39,44,46,]),'IN_PORT':([34,45,52,],[40,51,58,]),'RPAREN':([37,48,49,51,56,58,],[43,54,55,57,60,61,]),'width':([47,],[53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'creation':([0,],[1,]),'define_module':([0,],[2,]),'set_parameters':([2,],[4,]),'set_architecture':([4,],[7,]),'end_module':([7,],[11,]),'arch_expresions':([13,],[16,]),'arch_expresion':([13,16,],[17,26,]),'node_exp':([13,16,],[18,18,]),'edge_exp':([13,16,],[19,19,]),'connect_exp':([13,16,],[20,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> creation","S'",1,None,None,None),
  ('creation -> define_module set_parameters set_architecture end_module','creation',4,'p_full_module','axiParser.py',166),
  ('define_module -> DEFINE MOD_NAME LKEY','define_module',3,'p_define_module','axiParser.py',171),
  ('end_module -> RKEY END MOD_NAME','end_module',3,'p_end_module','axiParser.py',175),
  ('set_parameters -> PARAMETERS COLON input EQUALS NUMBER output EQUALS NUMBER width EQUALS NUMBER','set_parameters',11,'p_set_parameters','axiParser.py',180),
  ('set_architecture -> ARCHITECTURE COLON arch_expresions','set_architecture',3,'p_set_architecture','axiParser.py',185),
  ('arch_expresions -> arch_expresion','arch_expresions',1,'p_architecture_expresions','axiParser.py',190),
  ('arch_expresions -> arch_expresions arch_expresion','arch_expresions',2,'p_architecture_expresions','axiParser.py',191),
  ('arch_expresion -> node_exp','arch_expresion',1,'p_arch_expresion','axiParser.py',196),
  ('arch_expresion -> edge_exp','arch_expresion',1,'p_arch_expresion','axiParser.py',197),
  ('arch_expresion -> connect_exp','arch_expresion',1,'p_arch_expresion','axiParser.py',198),
  ('node_exp -> node ID EQUALS MOD_NAME LPAREN NUMBER RPAREN','node_exp',7,'p_new_node','axiParser.py',204),
  ('edge_exp -> edge ID LPAREN NUMBER RPAREN','edge_exp',5,'p_new_edge','axiParser.py',210),
  ('connect_exp -> connect LPAREN ID OUT_PORT COMA ID RPAREN','connect_exp',7,'p_connect_outport','axiParser.py',216),
  ('connect_exp -> connect LPAREN ID COMA ID IN_PORT RPAREN','connect_exp',7,'p_connect_inport','axiParser.py',222),
  ('connect_exp -> connect LPAREN this IN_PORT COMA ID IN_PORT RPAREN','connect_exp',8,'p_connect_module_input','axiParser.py',228),
  ('connect_exp -> connect LPAREN ID OUT_PORT COMA this OUT_PORT RPAREN','connect_exp',8,'p_connect_module_output','axiParser.py',234),
]
